# Autogenerated using ProtoBuf.jl v1.0.14 on 2023-10-04T11:14:05.956
# original file: /home/ablambe/toolpath/ONNXNaiveNASflux.jl/pb_scratch/onnx-operators-ml.proto3 (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export OperatorProto, OperatorSetProto

struct OperatorProto
    op_type::String
    since_version::Int64
    status::OperatorStatus.T
    doc_string::String
end
PB.default_values(::Type{OperatorProto}) = (;op_type = "", since_version = zero(Int64), status = OperatorStatus.EXPERIMENTAL, doc_string = "")
PB.field_numbers(::Type{OperatorProto}) = (;op_type = 1, since_version = 2, status = 3, doc_string = 10)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:OperatorProto})
    op_type = ""
    since_version = zero(Int64)
    status = OperatorStatus.EXPERIMENTAL
    doc_string = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            op_type = PB.decode(d, String)
        elseif field_number == 2
            since_version = PB.decode(d, Int64)
        elseif field_number == 3
            status = PB.decode(d, OperatorStatus.T)
        elseif field_number == 10
            doc_string = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return OperatorProto(op_type, since_version, status, doc_string)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::OperatorProto)
    initpos = position(e.io)
    !isempty(x.op_type) && PB.encode(e, 1, x.op_type)
    x.since_version != zero(Int64) && PB.encode(e, 2, x.since_version)
    x.status != OperatorStatus.EXPERIMENTAL && PB.encode(e, 3, x.status)
    !isempty(x.doc_string) && PB.encode(e, 10, x.doc_string)
    return position(e.io) - initpos
end
function PB._encoded_size(x::OperatorProto)
    encoded_size = 0
    !isempty(x.op_type) && (encoded_size += PB._encoded_size(x.op_type, 1))
    x.since_version != zero(Int64) && (encoded_size += PB._encoded_size(x.since_version, 2))
    x.status != OperatorStatus.EXPERIMENTAL && (encoded_size += PB._encoded_size(x.status, 3))
    !isempty(x.doc_string) && (encoded_size += PB._encoded_size(x.doc_string, 10))
    return encoded_size
end

struct OperatorSetProto
    magic::String
    ir_version::Int64
    ir_version_prerelease::String
    ir_build_metadata::String
    domain::String
    opset_version::Int64
    doc_string::String
    operator::Vector{OperatorProto}
    functions::Vector{FunctionProto}
end
PB.default_values(::Type{OperatorSetProto}) = (;magic = "", ir_version = zero(Int64), ir_version_prerelease = "", ir_build_metadata = "", domain = "", opset_version = zero(Int64), doc_string = "", operator = Vector{OperatorProto}(), functions = Vector{FunctionProto}())
PB.field_numbers(::Type{OperatorSetProto}) = (;magic = 1, ir_version = 2, ir_version_prerelease = 3, ir_build_metadata = 7, domain = 4, opset_version = 5, doc_string = 6, operator = 8, functions = 9)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:OperatorSetProto})
    magic = ""
    ir_version = zero(Int64)
    ir_version_prerelease = ""
    ir_build_metadata = ""
    domain = ""
    opset_version = zero(Int64)
    doc_string = ""
    operator = PB.BufferedVector{OperatorProto}()
    functions = PB.BufferedVector{FunctionProto}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            magic = PB.decode(d, String)
        elseif field_number == 2
            ir_version = PB.decode(d, Int64)
        elseif field_number == 3
            ir_version_prerelease = PB.decode(d, String)
        elseif field_number == 7
            ir_build_metadata = PB.decode(d, String)
        elseif field_number == 4
            domain = PB.decode(d, String)
        elseif field_number == 5
            opset_version = PB.decode(d, Int64)
        elseif field_number == 6
            doc_string = PB.decode(d, String)
        elseif field_number == 8
            PB.decode!(d, operator)
        elseif field_number == 9
            PB.decode!(d, functions)
        else
            PB.skip(d, wire_type)
        end
    end
    return OperatorSetProto(magic, ir_version, ir_version_prerelease, ir_build_metadata, domain, opset_version, doc_string, operator[], functions[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::OperatorSetProto)
    initpos = position(e.io)
    !isempty(x.magic) && PB.encode(e, 1, x.magic)
    x.ir_version != zero(Int64) && PB.encode(e, 2, x.ir_version)
    !isempty(x.ir_version_prerelease) && PB.encode(e, 3, x.ir_version_prerelease)
    !isempty(x.ir_build_metadata) && PB.encode(e, 7, x.ir_build_metadata)
    !isempty(x.domain) && PB.encode(e, 4, x.domain)
    x.opset_version != zero(Int64) && PB.encode(e, 5, x.opset_version)
    !isempty(x.doc_string) && PB.encode(e, 6, x.doc_string)
    !isempty(x.operator) && PB.encode(e, 8, x.operator)
    !isempty(x.functions) && PB.encode(e, 9, x.functions)
    return position(e.io) - initpos
end
function PB._encoded_size(x::OperatorSetProto)
    encoded_size = 0
    !isempty(x.magic) && (encoded_size += PB._encoded_size(x.magic, 1))
    x.ir_version != zero(Int64) && (encoded_size += PB._encoded_size(x.ir_version, 2))
    !isempty(x.ir_version_prerelease) && (encoded_size += PB._encoded_size(x.ir_version_prerelease, 3))
    !isempty(x.ir_build_metadata) && (encoded_size += PB._encoded_size(x.ir_build_metadata, 7))
    !isempty(x.domain) && (encoded_size += PB._encoded_size(x.domain, 4))
    x.opset_version != zero(Int64) && (encoded_size += PB._encoded_size(x.opset_version, 5))
    !isempty(x.doc_string) && (encoded_size += PB._encoded_size(x.doc_string, 6))
    !isempty(x.operator) && (encoded_size += PB._encoded_size(x.operator, 8))
    !isempty(x.functions) && (encoded_size += PB._encoded_size(x.functions, 9))
    return encoded_size
end
